import{j as f}from"./jsx-runtime-CkxqCPlQ.js";import{r as l}from"./index-DJO9vBfz.js";import"./index-DJdX7xnk.js";import{S as D,c as O}from"./utils-D29h-Vwk.js";import{T as B}from"./Typogrpahy-D-8__Tzc.js";function L(e,r=[]){let a=[];function o(u,i){const n=l.createContext(i),s=a.length;a=[...a,i];function v(c){const{scope:m,children:x,...p}=c,V=(m==null?void 0:m[e][s])||n,M=l.useMemo(()=>p,Object.values(p));return f.jsx(V.Provider,{value:M,children:x})}function d(c,m){const x=(m==null?void 0:m[e][s])||n,p=l.useContext(x);if(p)return p;if(i!==void 0)return i;throw new Error(`\`${c}\` must be used within \`${u}\``)}return v.displayName=u+"Provider",[v,d]}const t=()=>{const u=a.map(i=>l.createContext(i));return function(n){const s=(n==null?void 0:n[e])||u;return l.useMemo(()=>({[`__scope${e}`]:{...n,[e]:s}}),[n,s])}};return t.scopeName=e,[o,X(t,...r)]}function X(...e){const r=e[0];if(e.length===1)return r;const a=()=>{const o=e.map(t=>({useScope:t(),scopeName:t.scopeName}));return function(u){const i=o.reduce((n,{useScope:s,scopeName:v})=>{const c=s(u)[`__scope${v}`];return{...n,...c}},{});return l.useMemo(()=>({[`__scope${r.scopeName}`]:i}),[i])}};return a.scopeName=r.scopeName,a}var G=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"],I=G.reduce((e,r)=>{const a=l.forwardRef((o,t)=>{const{asChild:u,...i}=o,n=u?D:r;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),f.jsx(n,{...i,ref:t})});return a.displayName=`Primitive.${r}`,{...e,[r]:a}},{}),E="Progress",N=100,[q,ee]=L(E),[F,U]=q(E),w=l.forwardRef((e,r)=>{const{__scopeProgress:a,value:o=null,max:t,getValueLabel:u=k,...i}=e;(t||t===0)&&!b(t)&&console.error(z(`${t}`,"Progress"));const n=b(t)?t:N;o!==null&&!_(o,n)&&console.error(H(`${o}`,"Progress"));const s=_(o,n)?o:null,v=P(s)?u(s,n):void 0;return f.jsx(F,{scope:a,value:s,max:n,children:f.jsx(I.div,{"aria-valuemax":n,"aria-valuemin":0,"aria-valuenow":P(s)?s:void 0,"aria-valuetext":v,role:"progressbar","data-state":R(s,n),"data-value":s??void 0,"data-max":n,...i,ref:r})})});w.displayName=E;var C="ProgressIndicator",$=l.forwardRef((e,r)=>{const{__scopeProgress:a,...o}=e,t=U(C,a);return f.jsx(I.div,{"data-state":R(t.value,t.max),"data-value":t.value??void 0,"data-max":t.max,...o,ref:r})});$.displayName=C;function k(e,r){return`${Math.round(e/r*100)}%`}function R(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function P(e){return typeof e=="number"}function b(e){return P(e)&&!isNaN(e)&&e>0}function _(e,r){return P(e)&&!isNaN(e)&&e<=r&&e>=0}function z(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${N}\`.`}function H(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${N} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var j=w,J=$;const T=l.forwardRef(({className:e,value:r,time:a=33,...o},t)=>f.jsx(j,{ref:t,className:O("relative h-2 w-full overflow-hidden rounded-full bg-primary/20",e),...o,children:f.jsx(J,{className:`h-full w-full flex-1 ${(r||0)>a?"bg-[#2563eb]":"bg-red-600"} transition-all`,style:{transform:`translateX(-${100-(r||0)}%)`}})}));T.displayName=j.displayName;T.__docgenInfo={description:"",methods:[],props:{time:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"33",computed:!1}}}};const A=({maxTime:e=10,onTimeEnd:r})=>{const[o,t]=l.useState(100),u=10,i=1e3/u,n=d=>100/(d*u),s=(d,c,m)=>x=>{const p=x-d;return p<=0?(c(m),0):p},v=(d,c,m)=>{d===0&&m();const x=setInterval(()=>{t(p=>s(c,clearInterval,x)(p))},i);return x};return l.useEffect(()=>{const d=n(e),c=v(o,d,r);return()=>clearInterval(c)},[e,o,r]),f.jsxs("div",{className:"w-full flex justify-center flex-col items-center gap-2",children:[f.jsx(T,{value:o,max:100,className:"max-w-[60%]",time:50}),f.jsx(B,{text:`${(o/100*e).toFixed(1)}초`,size:"xl",color:"black"})]})};A.__docgenInfo={description:`@description
ProgressBar 컴포넌트는 시간이 지남에 따라 감소하는 진행 막대를 표시합니다.
최대 시간과 시간이 끝났을 때 호출될 콜백 함수를 받습니다.

@example
<ProgressBar maxTime={10} onTimeEnd={() => console.log('Time ended!')} />

@param {number} maxTime - 진행 막대가 실행될 최대 시간(초)입니다.
@param {() => void} onTimeEnd - 시간이 끝났을 때 호출될 콜백 함수입니다.

@returns {JSX.Element} 렌더링된 진행 막대 컴포넌트입니다.`,methods:[],displayName:"ProgressBar",props:{maxTime:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"10",computed:!1}},onTimeEnd:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}};const re={title:"Components/ProgressBar",component:A,tags:["autodocs"]},g={args:{maxTime:10,onTimeEnd:()=>{alert("time end")}}};var h,S,y;g.parameters={...g.parameters,docs:{...(h=g.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    maxTime: 10,
    onTimeEnd: () => {
      alert('time end');
    }
  }
}`,...(y=(S=g.parameters)==null?void 0:S.docs)==null?void 0:y.source}}};const te=["Default"];export{g as Default,te as __namedExportsOrder,re as default};
